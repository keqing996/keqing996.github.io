import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as l}from"./app-Dw53g8wv.js";const e="/assets/345432454325432-Zb8NYD6O.png",t="/assets/7456927348234-OHXE6hI-.png",p="/assets/097678678326478-CKb1mKf0.png",h="/assets/8963746578487-CPrdebKO.png",k={};function d(r,i){return l(),a("div",null,i[0]||(i[0]=[n(`<p><a href="https://github.com/keqing996/AndroidCppCrossCompile" target="_blank" rel="noopener noreferrer">AndroidCppCrossCompile</a></p><p>Android Studio的bug很多，在C++的开发体验上说不上有多好。很多时候我们需要JNI开发，或者纯C++开发，并不想在Android Studio中进行。于是我们需要一套脱离Android Studio的交叉编译安卓下C++程序的环境。</p><p>接下来用CMake来构建整个流程。首先准备工作，必须下载NDK，因为需要使用NDK的工具链。我这里的版本是r23c。</p><p>目标是编一个原生Linux程序，跑在安卓手机上，在log里面打印一个hello world。所以C++的部分非常简单。</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;android/log.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">constexpr</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> char*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> LogTag </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;HelloWorld&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> LogCatError</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> char*</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> tag</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> char*</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> message</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">	__android_log_print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(ANDROID_LOG_ERROR, tag, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, message);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    LogCatError</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(LogTag, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Test Test Hello&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来分两步走，首先让它编译出安卓平台的程序，然后再细看安卓一些特有的设置（比如Api Level）要怎么操作。</p><h2 id="编译出可执行文件" tabindex="-1"><a class="header-anchor" href="#编译出可执行文件"><span>编译出可执行文件</span></a></h2><p>通常来说，使用CMake编译，需要明确几个关键问题：</p><ul><li>Generator是什么，也就是用哪个工具来构建（众所周知CMake实际是个生成构建文件的构建工具）。影响两个参数，一个是CMake命令行的-G，一个是CMake的内置变量CMAKE_MAKE_PROGRAM。</li><li>编译器是什么。影响两个CMake的内置变量，CMAKE_C_COMPILER和CMAKE_CXX_COMPILER。</li><li>头文件在哪里。</li><li>链接库在哪里。</li></ul><p>对于Android构建，我们依次回答上面的问题。</p><ul><li>Generator是什么</li></ul><p>Android使用make.exe构建，因此CMake的参数-G使用Unix Makefiles。Android使用的make.exe就在下载的ndk里，最好就用这个make.exe，免得出幺蛾子。路径在ndkpath/prebuilt/windows-x86_64/bin/make.exe，比如我的ndk装在D盘下的一个路径里，那么我的make.exe就在D:/Programmes/Android/ndk/android-ndk-r23c/prebuilt/windows-x86_64/bin/make.exe。</p><ul><li>Compiler是什么</li></ul><p>Android使用的编译器为clang，也在下载的ndk里，就用它的这个clang。C编译器使用ndkpath/toolchains/llvm/prebuilt/windows-x86_64/bin/clang.exe，C++编译器使用ndkpath/toolchains/llvm/prebuilt/windows-x86_64/bin/clang++.exe。</p><p>使用CMake编译安卓，不需要显示指定编译器路径，而是指定CMake的toolchain文件，也就是CMAKE_TOOLCHAIN_FILE。安卓这个文件路径在ndkpath/build/cmake/android.toolchain.cmake。这里的toolchain文件会自己搞定编译器位置。</p><p>但是make.exe还是需要显示指定的，因为toolchain没有设置make的位置。</p><ul><li>Header在哪</li></ul><p>在ndkpath/toolchains/llvm/prebuilt/windows-x86_64/sysroot/usr/include/。不同于上面的Generator和Compiler，他们一般通过命令行传或者使用CMakePresets.json。但是Header是需要在CMakeLists.txt中写的。一般这里不使用绝对路径（为了团队协作，每个人有自己的ndk路径），可以使用toolchain中帮忙定义的一个变量CMAKE_ANDROID_NDK，指向的就是ndk路径，往后拼接到include即可。</p><ul><li>Library在哪</li></ul><p>在ndkpath/android-ndk-r23c/toolchains/llvm/prebuilt/windows-x86_64/sysroot/usr/lib/aarch64-linux-android/</p><p>搞定了上面的准备工作，就可以开始搓CMakeLists和CMakePresets了。先给出CMakePresets.json。</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;version&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;configurePresets&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        {  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            &quot;name&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Android&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            &quot;displayName&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Android&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            &quot;description&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Build android&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            &quot;generator&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Unix Makefiles&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            &quot;binaryDir&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;\${sourceDir}/build/\${presetName}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            &quot;cacheVariables&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">                &quot;CMAKE_TOOLCHAIN_FILE&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;D:/Programmes/Android/ndk/android-ndk-r23c/build/cmake/android.toolchain.cmake&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">                &quot;CMAKE_MAKE_PROGRAM&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;D:/Programmes/Android/ndk/android-ndk-r23c/prebuilt/windows-x86_64/bin/make.exe&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">                &quot;CMAKE_EXPORT_COMPILE_COMMANDS&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ],  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;buildPresets&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        {  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            &quot;name&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Android&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            &quot;configurePreset&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Android&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ]  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个文件解决了前两个问题，Generator和Compiler。Generator通过CMAKE_MAKE_PROGRAM指定。Compiler通过CMAKE_MAKE_PROGRAM指定toolchain文件来间接搞定。最后这里加了一个CMAKE_EXPORT_COMPILE_COMMANDS来生成编译指令文件compile_commands.json，如果使用vscode的话，clangd的代码提示需要它。</p><p>接下来是CMakeLists.txt。</p><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">cmake_minimum_required</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(VERSION 3.26)  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">project</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(AndroidCpp)  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">add_executable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(hello_world src/Main.cpp)  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">target_include_directories</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(hello_world PRIVATE  </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;\${CMAKE_ANDROID_NDK}/toolchains/llvm/prebuilt/windows-x86_64/sysroot/usr/include/&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">target_link_libraries</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(hello_world PRIVATE  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        liblog.so  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>变量CMAKE_ANDROID_NDK在toolchain中定义，指向ndk路径。</p><p>接下里configure加build即可，就可以编译出一个hello_world可执行程序了。放到安卓上adb shell执行一下，就可以顺利看到hello world。</p><figure><img src="`+e+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="调整android参数" tabindex="-1"><a class="header-anchor" href="#调整android参数"><span>调整Android参数</span></a></h2><p>安卓上的cpp其实没有这么简单，还有一些安卓独特的需要考虑的问题。比如使用什么指令集？是armv7还是armv8，minSdk是多少，如何指定等。</p><p>如果观察上面的CMake生成的compile_commands.json可以发现一些细节。</p><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这里生成的可执行文件实际上是armv7的，安卓sdk是16，非常的上古。实际上安卓通过给toolchain传参数来指定这些细节。可以传的参数打开这个toolchain文件开头就有写。</p><figure><img src="'+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>具体怎么传可以参考这里，https://developer.android.com/ndk/guides/cmake#variables。</p><p>举个例子，我们想让编译指令集为armv8，minSdk为31，只要在CMakePresets中加几个参数即可。</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;version&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;configurePresets&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        {  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            &quot;name&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Android&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            &quot;displayName&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Android&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            &quot;description&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Build android&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            &quot;generator&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Unix Makefiles&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            &quot;binaryDir&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;\${sourceDir}/build/\${presetName}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            &quot;cacheVariables&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">                &quot;CMAKE_TOOLCHAIN_FILE&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;D:/Programmes/Android/ndk/android-ndk-r23c/build/cmake/android.toolchain.cmake&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">                &quot;CMAKE_MAKE_PROGRAM&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;D:/Programmes/Android/ndk/android-ndk-r23c/prebuilt/windows-x86_64/bin/make.exe&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">                &quot;ANDROID_PLATFORM&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;31&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">                &quot;ANDROID_ABI&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;arm64-v8a&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">                &quot;CMAKE_EXPORT_COMPILE_COMMANDS&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ],  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;buildPresets&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        {  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            &quot;name&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Android&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            &quot;configurePreset&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Android&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ]  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>就可以看到compile_commands.json中，target变了。</p><figure><img src="`+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',39)]))}const c=s(k,[["render",d],["__file","CrossCompileAndroidCpp.html.vue"]]),g=JSON.parse('{"path":"/posts/Programming/CrossCompileAndroidCpp.html","title":"脱离AndroidStudio交叉编译安卓平台的C++","lang":"zh-CN","frontmatter":{"title":"脱离AndroidStudio交叉编译安卓平台的C++","date":"2023-12-17T00:00:00.000Z","tags":["Cpp","Android"],"categories":["Programming"],"description":"AndroidCppCrossCompile Android Studio的bug很多，在C++的开发体验上说不上有多好。很多时候我们需要JNI开发，或者纯C++开发，并不想在Android Studio中进行。于是我们需要一套脱离Android Studio的交叉编译安卓下C++程序的环境。 接下来用CMake来构建整个流程。首先准备工作，必须下载N...","head":[["meta",{"property":"og:url","content":"https://keqing996.github.io/posts/Programming/CrossCompileAndroidCpp.html"}],["meta",{"property":"og:site_name","content":"键盘缝的咖啡渍"}],["meta",{"property":"og:title","content":"脱离AndroidStudio交叉编译安卓平台的C++"}],["meta",{"property":"og:description","content":"AndroidCppCrossCompile Android Studio的bug很多，在C++的开发体验上说不上有多好。很多时候我们需要JNI开发，或者纯C++开发，并不想在Android Studio中进行。于是我们需要一套脱离Android Studio的交叉编译安卓下C++程序的环境。 接下来用CMake来构建整个流程。首先准备工作，必须下载N..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-23T11:47:04.000Z"}],["meta",{"property":"article:author","content":"键盘缝的咖啡渍"}],["meta",{"property":"article:tag","content":"Cpp"}],["meta",{"property":"article:tag","content":"Android"}],["meta",{"property":"article:published_time","content":"2023-12-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-23T11:47:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"脱离AndroidStudio交叉编译安卓平台的C++\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-12-17T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-23T11:47:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"键盘缝的咖啡渍\\"}]}"]]},"headers":[{"level":2,"title":"编译出可执行文件","slug":"编译出可执行文件","link":"#编译出可执行文件","children":[]},{"level":2,"title":"调整Android参数","slug":"调整android参数","link":"#调整android参数","children":[]}],"git":{"createdTime":1726762060000,"updatedTime":1727092024000,"contributors":[{"name":"keqing996","email":"epigrf@outlook.com","commits":2}]},"readingTime":{"minutes":3.84,"words":1151},"filePathRelative":"posts/Programming/CrossCompileAndroidCpp.md","localizedDate":"2023年12月17日","autoDesc":true}');export{c as comp,g as data};
